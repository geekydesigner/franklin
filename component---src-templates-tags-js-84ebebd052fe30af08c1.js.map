{"version":3,"sources":["webpack://bonneville/./src/components/Banner.js","webpack://bonneville/./src/components/BlogItem.js","webpack://bonneville/./src/templates/tags.js"],"names":["Banner","content","propsTypes","PropTypes","BlogItemStyles","styled","index","nodeObj","excerpt","frontmatter","title","date","path","featuredImageAlt","featuredImage","image","getImage","key","Link","to","className","G","loading","alt","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node"],"mappings":"qIAGMA,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OAAO,0BAAKA,IAGdD,EAAOE,WAAa,CAClBD,Q,MAASE,WAGX,O,oECLMC,E,KAAiBC,sBAAH,oEAAGA,CAAH,sgCAuIpB,IAjDiB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAEvBC,EAEED,EAFFC,QAFqC,EAInCD,EADFE,YAAeC,EAHsB,EAGtBA,MAAOC,EAHe,EAGfA,KAAMC,EAHS,EAGTA,KAAMC,EAHG,EAGHA,iBAAkBC,EAHf,EAGeA,cAEhDC,GAAQC,OAASF,GAEvB,OACE,gBAACV,EAAD,CAAgBa,IAAG,aAAeX,GAC/BS,GACC,8BACE,gBAAC,EAAAG,KAAD,CAAMC,GAAIP,GACR,wBAAMQ,UAAU,WAAWV,GAC3B,gBAAC,EAAAW,EAAD,CAAaC,QAAQ,OAAOP,MAAOA,EAAOQ,IAAKV,MAKpDH,GACC,0BACE,gBAAC,EAAAQ,KAAD,CAAMC,GAAIP,GAAOF,IAIpBF,GACC,2BACE,yBAAIA,GACHI,GACC,uBAAKQ,UAAU,QACb,gBAAC,EAAAF,KAAD,CAAME,UAAU,WAAWD,GAAIP,GAA/B,aAGA,0BAAKD,Q,2EC3EnB,UA3Ca,SAAC,GAA2B,IAAzBa,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gCACE,2BACE,gBAAC,IAAD,CAAQzB,QAAS6B,IAEhBF,EAAMG,KAAI,WAAWzB,GAAW,IAAnB0B,EAAkB,EAAlBA,KACZ,OAAO,gBAAC,IAAD,CAAUzB,QAASyB,EAAM1B,MAAOA","file":"component---src-templates-tags-js-84ebebd052fe30af08c1.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Banner = ({ content }) => {\n  return <h1>{content}</h1>\n}\n\nBanner.propsTypes = {\n  content: PropTypes.string,\n}\n\nexport default Banner\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\nconst BlogItemStyles = styled.article`\n  margin: calc(var(--spacing) * 4) 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto auto;\n  grid-gap: var(--spacing);\n\n  @media (min-width: 768px) {\n    margin: calc(var(--spacing) * 6) 0;\n    grid-template-rows: auto auto;\n    grid-gap: calc(var(--spacing) * 2);\n  }\n\n  @media (min-width: 1200px) {\n    margin: calc(var(--spacing) * 8) 0;\n    grid-gap: calc(var(--spacing) * 3);\n  }\n\n  > figure {\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    overflow: hidden;\n    background-color: #000;\n    margin: 0;\n    opacity: 1;\n\n    img {\n      transition: transform var(--transSlow) ease, opacity var(--transSlow) ease !important;\n      opacity: 1;\n    }\n  }\n\n  &:hover {\n    > figure {\n      img {\n        transform: scale(1.1);\n        opacity: 0.5 !important;\n      }\n    }\n  }\n\n  h2 {\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    font-size: var(--h3);\n    margin: 0;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  @media (min-width: 768px) {\n    h2 {\n      grid-column: 1 / 2;\n    }\n  }\n\n  > div {\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    p {\n      margin-top: 0;\n    }\n    @media (min-width: 768px) {\n      grid-column: 2 / 3;\n      grid-row: 2 / 3;\n\n      p {\n        margin-bottom: calc(var(--spacing) * 2);\n      }\n    }\n  }\n\n  .meta {\n    display: flex;\n    justify-content: space-between;\n\n    h4 {\n      margin: 0;\n      font-size: var(--h5);\n      color: var(--primaryColor);\n    }\n  }\n`\n\nconst BlogItem = ({ index, nodeObj }) => {\n  const {\n    excerpt,\n    frontmatter: { title, date, path, featuredImageAlt, featuredImage },\n  } = nodeObj\n  const image = getImage(featuredImage)\n\n  return (\n    <BlogItemStyles key={`blog-item-${index}`}>\n      {image && (\n        <figure>\n          <Link to={path}>\n            <span className=\"sr-only\">{title}</span>\n            <GatsbyImage loading=\"lazy\" image={image} alt={featuredImageAlt} />\n          </Link>\n        </figure>\n      )}\n\n      {title && (\n        <h2>\n          <Link to={path}>{title}</Link>\n        </h2>\n      )}\n\n      {excerpt && (\n        <div>\n          <p>{excerpt}</p>\n          {path && (\n            <div className=\"meta\">\n              <Link className=\"btn-link\" to={path}>\n                Link here\n              </Link>\n              <h4>{date}</h4>\n            </div>\n          )}\n        </div>\n      )}\n    </BlogItemStyles>\n  )\n}\n\nBlogItem.propTypes = {\n  alt: PropTypes.string,\n  title: PropTypes.string,\n  excerpt: PropTypes.string,\n  path: PropTypes.string,\n  date: PropTypes.string,\n}\n\nexport default BlogItem\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport BlogItem from \"../components/BlogItem\"\nimport Banner from \"../components/Banner\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <>\n      <div>\n        <Banner content={tagHeader} />\n\n        {edges.map(({ node }, index) => {\n          return <BlogItem nodeObj={node} index={index} />\n        })}\n      </div>\n    </>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            // fields: PropTypes.shape({\n            //   slug: PropTypes.string.isRequired,\n            // }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`query ($tag: String) {\n  allMarkdownRemark(\n    limit: 2000\n    sort: {fields: [frontmatter___date], order: DESC}\n    filter: {frontmatter: {tags: {in: [$tag]}}}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YY\")\n          path\n          tags\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n        excerpt\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}